# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Test

on:
  push:
    branches: [ "main" ]
    paths:
      - '**.py'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:


permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install . -r requirements-dev.txt

      - run: pre-commit run

      - name: Collect coverage
        run: |
          coverage run -m pytest -vv
          coverage report -m
          coverage xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          verbose: true # optional (default = false)

      - name: build wheel
        run: python -m pip wheel -w dist .
      
      - name: upload wheel as artifact
        uses: actions/upload-artifact@v3
        with:
          name: "clang-tools-pip_wheel"
          path: ${{ github.workspace }}/dist/*.whl

  install:
    needs: [build]
    strategy:
      matrix:
        # skip version 14 because it failed on ubuntu.
        version: [ 3.9, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12.0.1, 13 ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: download wheel artifact
        uses: actions/download-artifact@v2
        with:
          name: clang-tools-pip_wheel
          path: dist

      - name: Install pkg from wheel
        # using a wildcard as filename on Windows requires a bash shell
        shell: bash
        run: pip install dist/*.whl

      - name: Install clang-tools
        run: |
          clang-tools --install ${{ matrix.version }}
          which clang-format-${{ matrix.version }}
          which clang-tidy-${{ matrix.version }}

      - name: Check clang-tools on Windows
        if: matrix.os == 'windows-latest'
        run: |
          clang-format-${{ matrix.version }}.exe --version
          clang-tidy-${{ matrix.version }}.exe --version

      - name: Check clang-tools on Unix
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          clang-format-${{ matrix.version }} --version
          clang-tidy-${{ matrix.version }} --version

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - run: python -m pip install . -r docs/requirements.txt

      - name: Build docs
        working-directory: docs
        run: sphinx-build -E -W -b html . _build/html

      - name: Save built docs as artifact
        uses: actions/upload-artifact@v3
        with:
          name: "clang-tools-pip_docs"
          path: ${{ github.workspace }}/docs/_build/html

      - name: upload to github pages
        # only publish doc changes from main branch
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
