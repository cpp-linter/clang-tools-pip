[build-system]
requires = ["setuptools>=61", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "clang_tools"
description = "Install clang-tools (clang-format, clang-tidy, clang-query, clang-apply-replacements) with pip"
readme = "README.rst"
keywords = ["clang", "clang-tools", "clang-extra", "clang-tidy", "clang-format", "clang-query", "clang-apply-replacements"]
license = "MIT"
license-files = [ "LICENSE" ]
authors = [
    { name = "Xianpeng Shen", email = "xianpeng.shen@gmail.com" },
    { name = "Brendan Doherty", email = "2bndy5@gmail.com" },
]
classifiers = [
    # https://pypi.org/pypi?%3Aaction=list_classifiers
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Information Technology",
    "Natural Language :: English",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Topic :: Software Development :: Build Tools",
]
dynamic = ["version"]

[project.scripts]
clang-tools = "clang_tools.main:main"

[project.urls]
source =  "https://github.com/cpp-linter/clang-tools-pip"
tracker = "https://github.com/cpp-linter/clang-tools-pip/issues"

# ... other project metadata fields as specified in:
#     https://packaging.python.org/en/latest/specifications/declaring-project-metadata/

[tool.setuptools]
zip-safe = false
packages = ["clang_tools"]

[tool.setuptools_scm]
# It would be nice to include the commit hash in the version, but that
# can't be done in a PEP 440-compatible way.
version_scheme= "no-guess-dev"
# Test PyPI does not support local versions.
local_scheme = "no-local-version"
fallback_version = "0.0.0"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-vv"
testpaths = ["tests"]

[tool.mypy]
show_error_codes = true
show_column_numbers = true

[tool.coverage]
[tool.coverage.run]
dynamic_context = "test_function"
parallel = true
relative_files = true
omit = [
    # don't include tests in coverage
    # "tests/*",
]

[tool.coverage.json]
pretty_print = true

[tool.coverage.html]
show_contexts = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # ignore any branch that makes the module executable
    'if __name__ == "__main__"',
    "def main",
]
